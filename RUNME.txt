This application is build with .net core 2.1 and .net standard for the api. The client is build using React, with webpack for development server. Webpack's configuration uses a proxy to communicate with the development server. Both the client application, and the api have hot loaders, which automatically re-compile/re-transpile the application during execution in your development environment. 
 
Additionally there are bash audimation scripts that can be ran in order to build or deploy the database and api, as well as run the api in hot loader mode, currently running of the client application is not included in these scripts, however webpack can be ran by a simple command using yarn or npm explained below.

Required Dependencies for this deployment are microsoft visual studio, npm, and Visual Studio 2017 build tools.
		Optional package managers: pip, and chocolatey (easy install of dependencies)
			* https://chocolatey.org/
			* https://www.python.org/downloads/ (comes with pip)	
		Optional dependencies: jq, and httpie (token script)
			* pip install httpie 
				- https://httpie.org/
			* choco install jq
				- https://stedolan.github.io/jq/

DEPLOY DATABASE: (Two Options)
* Manually via visual studio 
	(requires the installation of sql data tool during visual studio setup)
* Automated via bash script 
	(requires an vs build tools 2017)
	** choco install visualstudio2017buildtools

Option 1: Manually via visual studio
	1. Open App.sln
	2. In the Database solution folder you will see two database projects Platform and Membership
	3. Double click on App.*.publish.xml
	4. This will prompt you to deploy the database, an option to change the connection string will be available, change the connection string to your sql server installation, the default stored in the xml file is for LocalDB which is installed with visual studio when you choose to install database tools. Feel free to change it to point to your test sql server instance.
	5. Repeat this process for both Platform and Membership


Option 2: Automated via bash script.
	1. Make sure you have build tools sdk installed, the installer can be found in this repo at /Utilities/Command/BuildDependencies/vs_buildtools.exe
		** using chocolatey package manager for windows you can also install the build tools via "choco install visualstudio2017buildtools"
	2. Check connection strings inside App.*.publish.xml for both Platform and Membership databases, the default is set to LocalDb which comes with Visual studio when you install the database tools. Change the connection string in this file accordingly and save it.
	3. Open your bash console emulator (git bash, conEmu, Cmder, etc...)
	4. navigate to /Utilities/Command
	5. execute ./audi.sh
	6. run build command
	7. Build both Platform / Membership Dacpac
	8. keep typing exit until your back at the main menu
	9. type deploy
	10. type Platform or Membership
	11. repeat step for both Platform and Membership database
		** If there is a failure note the erorr message, check your connection string, do you have vs2017 build tools installed?


RUNNING THE API:
	* Via Visual Studio
	* Via Hot Loader (bash)

Option 1: Visual studio
	* Open TextNameSearch.sln
	* check connection string in appsettings.development.json
	* Make sure App.Api is set as Startup Project
	* Hit F5
		-- Your now running the api using Kestrel via a process started by visual studio

Option 2: Hot Loader
	* check connection string in appsettings.development.json
	* using bash emulator navigate to ~/Utilities/Command
	* type ./audi.sh
	* type run
	* type api
		-- Now the api is running in kestrel via hot loader mode, you may change code in the api and your changes will be recompiled automatically with the hot loader.

TESTING API (via swagger):
	username: "alevine"
	password: "password"

 * to test api endpoints through swagger navigate to /swagger example: http://localhost:5000/swagger
   or http://localhost:3000/swagger if you have webpack server running thanks to our webpack proxy
 * now we need a token in order to test most of the api endpoints all with the exception of the token controller
 * goto the token controller and test the createtoken api (don't forget to click Try It Out Button)
 	** there are two accounts already created from sample data loaded via the dacpac they are `alevine` and `talkersoft`, both of these accounts have the password of "password", passwords stored in the database are encrypted, technically you could also create an account via swagger, the create account option in the web application is not yet implemented, and also this endpoint has not yet been tested.
 * click the "try it out" button and supply the correct credentials for this endpoint, click the execute button, this will supply you with a token. 
 * adding the token to swagger is done by simply clicking the authorize button and supplying the following value "bearer {token}". That is the string bearer followed by a space and the token without the curly braces or quotation marks surrounding the token.
 	** additionally you can gain a token by executing ./gettoken.sh {username} {password} from ~/Utilities/Command while the api is running
 	** ./gettoken.sh has two dependencies as follows
 		- jqlib (choco install jq)
 		- httpie (pip install httpie) 
	 		-- pip is the package manager included with python
	 		-- choco is a 3rd party windows package manager easily installed via command line via powershell

RUNNING THE CLIENT:
	if you do not have yarn and want to install it
				npm install yarn -g
	if you do not wish to install yarn all commands below could theoretically be replaced with npm (untested)
		* From /Web/App.Client
			yarn install
		* From /Web/App.Client/App.App 
			yarn install
		* From /Web/App.Client/App.App 
			yarn run server
			** this will run the webpack dev server running on port 3000
			** since the api is running on port 5000, the webpack configuration provides a proxy from port 3000 to the api on port 5000.



ENJOY!
