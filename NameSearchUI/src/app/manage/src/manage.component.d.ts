import { EventEmitter, OnInit, AfterViewInit, ElementRef } from '@angular/core';
import { Router } from '@angular/router';
import { GridOptions, ColDef, RowNode } from 'ag-grid/main';
import { TranslatorService } from '@iframework/translator';
import { FrameworkComponentBase, ModalService, ToastService, ModalComponent, DualComponentOptions } from '@iframework/forms';
import { IManageService, ActionItem } from './models';
import { NameValueOptionItem } from '@iframework/core';
export declare class ManageComponent extends FrameworkComponentBase implements OnInit, AfterViewInit {
    private _router;
    private _elementRef;
    private _modalService;
    private _toastService;
    gridOptions: GridOptions;
    columnDefs: ColDef[];
    addRoute: string;
    gridAction: boolean;
    isMobile: boolean;
    visibleColumns: string[];
    columns: any[];
    private _rowProps;
    private _isMoving;
    private _element;
    private _nodes;
    private _movedColumn;
    private _columnState;
    resultsFound: number;
    totalSize: any;
    IsAll: boolean;
    columnOptions: DualComponentOptions;
    columnsmodal: ModalComponent;
    manageService: IManageService;
    actionItems: ActionItem[];
    pkFields: string[];
    title: string;
    showToolbar: boolean;
    autoResizeColumns: boolean;
    cellValueChanged: EventEmitter<{}>;
    rowSelected: EventEmitter<{}>;
    modelUpdated: EventEmitter<{}>;
    rowsLoaded: EventEmitter<{}>;
    rowDeleted: EventEmitter<{}>;
    rowValueChanged: EventEmitter<{}>;
    constructor(translatorService: TranslatorService, _router: Router, _elementRef: ElementRef, _modalService: ModalService, _toastService: ToastService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    getItems(): NameValueOptionItem[];
    private getRowClass(params);
    RowValidatorFn: (row: any) => boolean;
    private validateRow(rowIndex);
    private refreshRowCount();
    private initGridOptions(showGrouping);
    get(): void;
    addRows(numRows?: number): void;
    scrollDown(): void;
    showOverLay(): void;
    startEditingCell(params: {
        rowIndex: number;
        colKey: string;
        keyPress?: number;
        charPress?: string;
    }): void;
    setFocusedCell(rowIndex: number, colID: string, floating?: string): void;
    refresh(): void;
    markAsDirty(rowIndex: number): void;
    markAsClean(rowIndex: number): void;
    markAsValid(rowIndex: number): void;
    markAsInvalid(rowIndex: number): void;
    isValid(rowIndex: number): boolean;
    isDirty(rowIndex: number): boolean;
    hasInvalidRows(): boolean;
    getSelectedRow(): RowNode;
    private createColumnDefs();
    private editClick(params);
    private removeItem(params);
    private deleteClick(params);
    private onResize(e);
    sizeToFit(): void;
    columnsAssign(e: any): void;
    columnsUnAssign(e: any): void;
    updateColumnVisibility(): void;
    onColumnMoved(e: any): void;
    onColumnVisible(e: any): void;
    selectRow(rowIndex: number): void;
    onCellValueChanged(e: any): void;
    onRowSelected(e: {
        node: RowNode;
    }): void;
    onRowValueChanged(e: any): void;
    onDragStopped(e: any): void;
    onDragStarted(e: any): void;
    setRowData(data: any[]): void;
    readonly rows: any[] | undefined;
    readonly wrapperWidth: string;
}
